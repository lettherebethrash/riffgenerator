{"version":3,"sources":["logic/newriff.js","App.js","reportWebVitals.js","index.js"],"names":["NewTab","useState","scale","setScale","onSubmit","click","major","minor","i","length","j","Math","floor","random","temp","riff","join","preventDefault","alert","document","getElementById","innerHTML","type","value","onChange","e","target","Home","className","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0MA+CeA,EA7CA,WACX,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KA8BA,OACI,uBAAMC,SA9BU,SAACC,GACjB,IAAIC,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC9BC,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC/B,GAAc,UAAVL,EAAmB,CACnB,IAAK,IAAIM,EAAIF,EAAMG,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACpC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACvCM,EAAOR,EAAME,GACjBF,EAAME,GAAKF,EAAMI,GACjBJ,EAAMI,GAAKI,EAElB,IAAIC,EAAOT,EAAMU,KAAK,KAChBX,EAAMY,iBACNC,MAAM,sBAAwBH,QAEhC,GAAc,UAAVb,EAAmB,CAC3B,IAAK,IAAIM,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACpC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACtCM,EAAOP,EAAMC,GACjBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEpB,IAAIC,EAAOR,EAAMS,KAAK,KAChBX,EAAMY,iBACNC,MAAM,sBAAwBH,QAG7BI,SAASC,eAAe,SAASC,UAAY,sCAI9C,UACI,sDACI,uBACIC,KAAK,OACLC,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OAAOtB,EAASsB,EAAEC,OAAOH,aAG3C,uBAAOD,KAAO,SAASC,MAAQ,WCzB5BI,EAdF,WACX,OACE,sBAAKC,UAAY,YAAjB,UACE,sBAAKA,UAAY,UAAjB,UACE,mBAAGC,GAAK,QAAR,4CACA,mBAAGA,GAAK,WAAR,oIACA,kGAEF,qBAAKD,UAAY,OAAjB,SACE,cAAC,EAAD,UCAOE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASC,eAAe,SAM1BU,K","file":"static/js/main.98f6266d.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nconst NewTab = () => {\n    const [scale, setScale] = useState(\"\");\n    const handleClick = (click) => {\n        let major = [0, 2, 4, 5, 7, 9, 11]; \n\t    let minor = [0, 2, 3, 5, 7, 8, 10]; \n\t    if (scale === \"major\") { //uses fisher-yates algorithm to randomise array \n\t        for (let i = major.length - 1; i > 0; i--) {\n   \t            let j = Math.floor(Math.random() * (i + 1));\n   \t\t        let temp = major[i];\n   \t\t        major[i] = major[j];\n   \t\t        major[j] = temp;\n\t\t    }\n\t\t    let riff = major.join(\"-\"); \n            click.preventDefault();\n            alert('Your new melody is ' + riff);\n\t    }\n\t    else if (scale === \"minor\") {  \n\t    \tfor (let i = minor.length - 1; i > 0; i--) {\n   \t        \tlet j = Math.floor(Math.random() * (i + 1));\n         \t\tlet temp = minor[i];\n         \t\tminor[i] = minor[j];\n         \t\tminor[j] = temp;\n    \t\t}\n\t\tlet riff = minor.join(\"-\");\n        click.preventDefault();\n        alert('Your new melody is ' + riff);\n\t    } \n    \telse {\n    \t    document.getElementById(\"intro\").innerHTML = \"Please enter either major or minor\";\n\t    }\n    } \n    return (\n        <form onSubmit = {handleClick}>\n            <label>Enter your scale:\n                <input\n                    type=\"text\" \n                    value={scale}\n                    onChange={(e) => setScale(e.target.value)}\n                />\n            </label>\n            <input type = \"submit\" value = \"Go\"/>\n        </form>\n    )\n}\n\nexport default NewTab; ","import './App.css';\nimport NewTab from './logic/newriff';\n\nconst Home = () => {\n  return (\n    <div className = \"container\">\n      <div className = \"heading\">\n        <p id = \"title\">Welcome to the Riff Generator!</p> \n        <p id = \"subtitle\">A webapp to autogenerate guitar melodies.  Just enter 'major' or 'minor' and the fret numbers for 1 string will appear</p>\n        <p>Designed, written and implemented by Tom Sherrin, October 2021</p>\n      </div>\n      <div className = \"view\">\n        <NewTab />\n      </div>\n    </div>\n  );\n}\nexport default Home;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}